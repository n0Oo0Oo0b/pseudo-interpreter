program         = block EOF ;


block           = statement* ;



statement       = procDecl
                | functionDecl
                | ifStmt
                | caseStmt
                | forLoop
                | repeatLoop
                | whileLoop
                | statement
                | declareStmt
                | constantDecl
                | inputStmt
                | outputStmt
                | returnStmt
                | fOpenStmt
                | fReadStmt
                | fWriteStmt
                | fCloseStmt
                | procedureCall
                | exprStmt ;

procDecl        = "PROCEDURE" IDENTIFIER "(" parameters? ")"
                    statement* "ENDPROCEDURE" ;
functionDecl    = "FUNCTION" IDENTIFIER "(" parameters? ")" "RETURNS" datatype
                    statement* "ENDFUNCTION";
ifStmt          = "IF" expression
                    "THEN" statement*
                    ("ELSE" statement*)?
                    "ENDIF" ;
caseStmt        = "CASE" "OF" IDENTIFIER
                    (literal ":" statement)+
                    ("OTHERWISE" statement)?
                    "ENDCASE" ;
forLoop         = "FOR" IDENTIFIER "<-" expression "TO" expression ("STEP" expression)?
                    statement* "NEXT" IDENTIFIER ;
repeatLoop      = "REPEAT" statement* "UNTIL" expression ;
whileLoop       = "WHILE" expression "DO" statement* "ENDWHILE";

declareStmt     = "DECLARE" IDENTIFIER ":" datatype ;
constantDecl    = "CONSTANT" IDENTIFIER "<-" literal ;
inputStmt       = "INPUT" IDENTIFIER ;
outputStmt      = "OUTPUT" arguments ;
returnStmt      = "RETURN" expression ;
fOpenStmt       = "OPENFILE" fileIdentifier "FOR" fileMode ;
fReadStmt       = "READFILE" fileIdentifier "," IDENTIFIER ;
fWriteStmt      = "WRITEFILE" fileIdentifier "," IDENTIFIER ;
fCloseStmt      = "CLOSEFILE" fileIdentifier ;
procedureCall   = "CALL" IDENTIFIER ( "(" arguments ")" )? ;
exprStmt        = expression ;



expression      = assignment ;
assignment      = logicOr ( "<-" logicOr )?
logicOr         = logicAnd ( "OR" logicAnd )* ;
logicAnd        = logicNot ( "AND" logicNot )* ;
logicNot        = "NOT"? logicNot | comparison ;
comparison      = term ( ( "<>" | "=" | "<=" | ">=" | "<" | ">") term )* ;
term            = factor ( ( "-" | "+" ) factor )* ;
factor          = call ( ( "/" | "*" ) call )* ;
call            = primary ( "(" arguments? ")" | "[" arguments "]" )* ;
primary         = literal | IDENTIFIER | "(" expression ")" ;



datatype        = basicType | arrayType ;
arrayType       = "ARRAY" "[" arrayRange ("," arrayRange)* "]" "OF" basicType ;
arrayRange      = expression ":" expression ;
basicType       = "INTEGER" | "REAL" | "CHAR" | "STRING" | "BOOLEAN" ;
literal         = INTEGER | REAL | CHAR | STRING | BOOLEAN ;
arguments       = expression ("," expression)* ;
parameters      = IDENTIFIER ":" datatype ("," IDENTIFIER ":" datatype)* ;

fileIdentifier  = STRING ;
fileMode        = "READ" | "WRITE" ;



INTEGER         = "-"? DIGIT+ ;
REAL            = "-"? DIGIT+ "." DIGIT+ ;
CHAR            = "'" ( ~"'" ) "'" ;
STRING          = "\"" ( ~"\"" )* "\"" ;
BOOLEAN         = "TRUE" | "FALSE" ;
IDENTIFIER      = ALPHA ( ALPHA | DIGIT )* ;
ALPHA           = "a" ... "z" | "A" ... "Z" ;
DIGIT           = "0" ... "9" ;
NEWLINE         = "\n" ;
